<Activity mc:Ignorable="sap sap2010" x:Class="Find_EmptyNonEmpty_Cell_Example" this:Find_EmptyNonEmpty_Cell_Example.in_FilePATH_XLSX_Challenge="C:\Users\Baris\Documents\_CV Stuff\UiPath_Excel_Activities_WithHandle_OpenLibrary\_EXAMPLE_COMPONENTS\challenge.xlsx" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_FilePATH_XLSX_Challenge" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Find_EmptyNonEmpty_Cell_Example_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Find_EmptyNonEmpty_Cell_Example" sap:VirtualizedContainerService.HintSize="1259,3280" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence sap:VirtualizedContainerService.HintSize="468,3257" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:Object" Name="XLApp" />
        <Variable x:TypeArguments="x:Object" Name="XL_WorkBook" />
        <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="dict_WorkSHEETs" />
        <Variable x:TypeArguments="x:Object" Name="xl_WorkSheet" />
        <Variable x:TypeArguments="x:String" Name="cell_LastColumn" />
        <Variable x:TypeArguments="x:String" Name="cell_FirstValue" />
        <Variable x:TypeArguments="x:String" Name="cell_ToWriteFormula" />
        <Variable x:TypeArguments="x:String" Name="cell_Range_End" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:Comment sap:VirtualizedContainerService.HintSize="434,107" sap2010:WorkflowViewState.IdRef="Comment_1" Text="UPDATE THE FILEPATHS IN ARGUMENTS BEFORE TESTING" />
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="create Excel Instance" DisplayName="ExcelApp_Instance_Create - Invoke Workflow File (ExcelApp_Instance_Create.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="ExcelApp_Instance_Create.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Boolean" x:Key="in_Visible">True</InArgument>
          <InArgument x:TypeArguments="x:Boolean" x:Key="in_DisplayAlerts">False</InArgument>
          <OutArgument x:TypeArguments="x:Object" x:Key="out_ExcelApp">[XLApp]</OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Open UiPath Challenge Excel" DisplayName="WorkBOOK_Open - Invoke Workflow File (WorkBOOK_Open.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="WorkBOOK_Open.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_ExcelApp">[XLApp]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_FilePATH_XL">[in_FilePATH_XLSX_Challenge]</InArgument>
          <OutArgument x:TypeArguments="x:Object" x:Key="out_XLWorkBOOK">[XL_WorkBook]</OutArgument>
          <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_dict_WorkSHEETs">[dict_WorkSHEETS]</OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <Assign sap2010:Annotation.AnnotationText="Get First Worksheet as an object from dictionary assign it to a object variable" sap:VirtualizedContainerService.HintSize="434,156" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Object">[xl_WorkSheet]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Object">[dict_WorkSHEETs.Values.First]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Activate Worksheet" DisplayName="WorkSHEET_Activate - Invoke Workflow File (WorkSHEET_Activate.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="WorkSHEET_Activate.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Data Starts from B3 ends at H13 Start from B1 look downwards and find the First data header" DisplayName="RANGE_Find_First_NON_Empty_Cell - Invoke Workflow File (RANGE_Find_First_NON_Empty_Cell.xaml)" sap:VirtualizedContainerService.HintSize="434,219" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="RANGE_Find_First_NON_Empty_Cell.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell_Start">B1</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Direction">D</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Found_Cell">[cell_LastColumn]</OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="You are now at Cell B3 now look towards right and find the first empty cell where you can create your new column" DisplayName="RANGE_Find_First_Empty_Cell - Invoke Workflow File (RANGE_Find_First_Empty_Cell.xaml)" sap:VirtualizedContainerService.HintSize="434,234" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="RANGE_Find_First_Empty_Cell.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell_Start">[cell_LastColumn]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Direction">R</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Found_Cell">[cell_LastColumn]</OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Create your new column by writing a header to I3" DisplayName="RANGE_Write_Cell_Value - Invoke Workflow File (RANGE_Write_Cell_Value.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="RANGE_Write_Cell_Value.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell">[cell_LastColumn]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Value_To_Write">Phone Number Value</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="You are at I3 now go one row down and one row left so that you can find the cell of first telephone number" DisplayName="RANGE_Offset_Cell - Invoke Workflow File (RANGE_Offset_Cell.xaml)" sap:VirtualizedContainerService.HintSize="434,219" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="RANGE_Offset_Cell.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell_Start">[cell_LastColumn]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Found_Cell">[cell_FirstValue]</OutArgument>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_Offset_Rows">1</InArgument>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_Offset_Columns">-1</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Go one row down from the cell you wrote your header so that you can write your formula" DisplayName="RANGE_Offset_Cell - Invoke Workflow File (RANGE_Offset_Cell.xaml)" sap:VirtualizedContainerService.HintSize="434,219" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="RANGE_Offset_Cell.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell_Start">[cell_LastColumn]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Found_Cell">[cell_ToWriteFormula]</OutArgument>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_Offset_Rows">1</InArgument>
          <InArgument x:TypeArguments="x:Int32" x:Key="in_Offset_Columns">0</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Write formula to the empty cell under your new header address the cell we found the first telephone number" DisplayName="RANGE_Write_Cell_Formula - Invoke Workflow File (RANGE_Write_Cell_Formula.xaml)" sap:VirtualizedContainerService.HintSize="434,219" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="RANGE_Write_Cell_Formula.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Cell">[cell_ToWriteFormula]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Formula_To_Write">["=NUMBERVALUE("+cell_FirstValue+")"]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Find the most bottom right cell in our sheet" DisplayName="RANGE_Find_Last_Used_Cell - Invoke Workflow File (RANGE_Find_Last_Used_Cell.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="RANGE_Find_Last_Used_Cell.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET">[xl_WorkSheet]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Last_Used_Cell">[cell_Range_End]</OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_Last_Used_Column" />
          <OutArgument x:TypeArguments="x:Int32" x:Key="out_Last_Used_Row" />
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Copy and paste only formulas to the new column" DisplayName="RANGE_Copy_Paste_Advanced - Invoke Workflow File (RANGE_Copy_Paste_Advanced.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="RANGE_Copy_Paste_Advanced.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET_FROM">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Range_FROM">[cell_ToWriteFormula]</InArgument>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkSHEET_TO">[xl_WorkSheet]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Range_TO">[cell_ToWriteFormula+":"+cell_Range_End]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_XLPasteType">xlPasteFormulas</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Save workbook as" DisplayName="WorkBOOK_SaveAS - Invoke Workflow File (WorkBOOK_SaveAS.xaml)" sap:VirtualizedContainerService.HintSize="434,208" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="WorkBOOK_SaveAS.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkBOOK">[XL_WorkBook]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_FilePATH_XL_New">["C:\Users\"+Environment.UserName+"\Downloads\_Deneme.xlsx"]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="WorkBOOK_Close - Invoke Workflow File (WorkBOOK_Close.xaml)" sap:VirtualizedContainerService.HintSize="434,177" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="WorkBOOK_Close.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_XLWorkBOOK">[XL_WorkBook]</InArgument>
          <InArgument x:TypeArguments="x:Boolean" x:Key="in_SaveChanges">False</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ExcelApp_Instance_Close - Invoke Workflow File (ExcelApp_Instance_Close.xaml)" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="ExcelApp_Instance_Close.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:Object" x:Key="in_ExcelApp" />
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
  </Sequence>
</Activity>